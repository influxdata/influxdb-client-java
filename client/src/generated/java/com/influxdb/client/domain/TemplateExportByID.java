/*
 * InfluxDB OSS API Service
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.influxdb.client.domain;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.influxdb.client.domain.TemplateExportByIDOrgIDs;
import com.influxdb.client.domain.TemplateExportByIDResources;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * TemplateExportByID
 */

public class TemplateExportByID {
  public static final String SERIALIZED_NAME_STACK_I_D = "stackID";
  @SerializedName(SERIALIZED_NAME_STACK_I_D)
  private String stackID;

  public static final String SERIALIZED_NAME_ORG_I_DS = "orgIDs";
  @SerializedName(SERIALIZED_NAME_ORG_I_DS)
  private List<TemplateExportByIDOrgIDs> orgIDs = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<TemplateExportByIDResources> resources = new ArrayList<>();

  public TemplateExportByID stackID(String stackID) {
    this.stackID = stackID;
    return this;
  }

   /**
   * Get stackID
   * @return stackID
  **/
  public String getStackID() {
    return stackID;
  }

  public void setStackID(String stackID) {
    this.stackID = stackID;
  }

  public TemplateExportByID orgIDs(List<TemplateExportByIDOrgIDs> orgIDs) {
    this.orgIDs = orgIDs;
    return this;
  }

  public TemplateExportByID addOrgIDsItem(TemplateExportByIDOrgIDs orgIDsItem) {
    if (this.orgIDs == null) {
      this.orgIDs = new ArrayList<>();
    }
    this.orgIDs.add(orgIDsItem);
    return this;
  }

   /**
   * Get orgIDs
   * @return orgIDs
  **/
  public List<TemplateExportByIDOrgIDs> getOrgIDs() {
    return orgIDs;
  }

  public void setOrgIDs(List<TemplateExportByIDOrgIDs> orgIDs) {
    this.orgIDs = orgIDs;
  }

  public TemplateExportByID resources(List<TemplateExportByIDResources> resources) {
    this.resources = resources;
    return this;
  }

  public TemplateExportByID addResourcesItem(TemplateExportByIDResources resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

   /**
   * Get resources
   * @return resources
  **/
  public List<TemplateExportByIDResources> getResources() {
    return resources;
  }

  public void setResources(List<TemplateExportByIDResources> resources) {
    this.resources = resources;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateExportByID templateExportByID = (TemplateExportByID) o;
    return Objects.equals(this.stackID, templateExportByID.stackID) &&
        Objects.equals(this.orgIDs, templateExportByID.orgIDs) &&
        Objects.equals(this.resources, templateExportByID.resources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stackID, orgIDs, resources);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateExportByID {\n");
    sb.append("    stackID: ").append(toIndentedString(stackID)).append("\n");
    sb.append("    orgIDs: ").append(toIndentedString(orgIDs)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

