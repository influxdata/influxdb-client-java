/*
 * InfluxDB OSS API Service
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.influxdb.client.domain;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.influxdb.client.domain.TemplateSummaryDiffBuckets;
import com.influxdb.client.domain.TemplateSummaryDiffChecks;
import com.influxdb.client.domain.TemplateSummaryDiffDashboards;
import com.influxdb.client.domain.TemplateSummaryDiffLabelMappings;
import com.influxdb.client.domain.TemplateSummaryDiffLabels;
import com.influxdb.client.domain.TemplateSummaryDiffNotificationEndpoints;
import com.influxdb.client.domain.TemplateSummaryDiffNotificationRules;
import com.influxdb.client.domain.TemplateSummaryDiffTasks;
import com.influxdb.client.domain.TemplateSummaryDiffTelegrafConfigs;
import com.influxdb.client.domain.TemplateSummaryDiffVariables;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * TemplateSummaryDiff
 */

public class TemplateSummaryDiff {
  public static final String SERIALIZED_NAME_BUCKETS = "buckets";
  @SerializedName(SERIALIZED_NAME_BUCKETS)
  private List<TemplateSummaryDiffBuckets> buckets = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private List<TemplateSummaryDiffChecks> checks = new ArrayList<>();

  public static final String SERIALIZED_NAME_DASHBOARDS = "dashboards";
  @SerializedName(SERIALIZED_NAME_DASHBOARDS)
  private List<TemplateSummaryDiffDashboards> dashboards = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<TemplateSummaryDiffLabels> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABEL_MAPPINGS = "labelMappings";
  @SerializedName(SERIALIZED_NAME_LABEL_MAPPINGS)
  private List<TemplateSummaryDiffLabelMappings> labelMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTIFICATION_ENDPOINTS = "notificationEndpoints";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_ENDPOINTS)
  private List<TemplateSummaryDiffNotificationEndpoints> notificationEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTIFICATION_RULES = "notificationRules";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_RULES)
  private List<TemplateSummaryDiffNotificationRules> notificationRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private List<TemplateSummaryDiffTasks> tasks = new ArrayList<>();

  public static final String SERIALIZED_NAME_TELEGRAF_CONFIGS = "telegrafConfigs";
  @SerializedName(SERIALIZED_NAME_TELEGRAF_CONFIGS)
  private List<TemplateSummaryDiffTelegrafConfigs> telegrafConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_VARIABLES = "variables";
  @SerializedName(SERIALIZED_NAME_VARIABLES)
  private List<TemplateSummaryDiffVariables> variables = new ArrayList<>();

  public TemplateSummaryDiff buckets(List<TemplateSummaryDiffBuckets> buckets) {
    this.buckets = buckets;
    return this;
  }

  public TemplateSummaryDiff addBucketsItem(TemplateSummaryDiffBuckets bucketsItem) {
    if (this.buckets == null) {
      this.buckets = new ArrayList<>();
    }
    this.buckets.add(bucketsItem);
    return this;
  }

   /**
   * Get buckets
   * @return buckets
  **/
  public List<TemplateSummaryDiffBuckets> getBuckets() {
    return buckets;
  }

  public void setBuckets(List<TemplateSummaryDiffBuckets> buckets) {
    this.buckets = buckets;
  }

  public TemplateSummaryDiff checks(List<TemplateSummaryDiffChecks> checks) {
    this.checks = checks;
    return this;
  }

  public TemplateSummaryDiff addChecksItem(TemplateSummaryDiffChecks checksItem) {
    if (this.checks == null) {
      this.checks = new ArrayList<>();
    }
    this.checks.add(checksItem);
    return this;
  }

   /**
   * Get checks
   * @return checks
  **/
  public List<TemplateSummaryDiffChecks> getChecks() {
    return checks;
  }

  public void setChecks(List<TemplateSummaryDiffChecks> checks) {
    this.checks = checks;
  }

  public TemplateSummaryDiff dashboards(List<TemplateSummaryDiffDashboards> dashboards) {
    this.dashboards = dashboards;
    return this;
  }

  public TemplateSummaryDiff addDashboardsItem(TemplateSummaryDiffDashboards dashboardsItem) {
    if (this.dashboards == null) {
      this.dashboards = new ArrayList<>();
    }
    this.dashboards.add(dashboardsItem);
    return this;
  }

   /**
   * Get dashboards
   * @return dashboards
  **/
  public List<TemplateSummaryDiffDashboards> getDashboards() {
    return dashboards;
  }

  public void setDashboards(List<TemplateSummaryDiffDashboards> dashboards) {
    this.dashboards = dashboards;
  }

  public TemplateSummaryDiff labels(List<TemplateSummaryDiffLabels> labels) {
    this.labels = labels;
    return this;
  }

  public TemplateSummaryDiff addLabelsItem(TemplateSummaryDiffLabels labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  public List<TemplateSummaryDiffLabels> getLabels() {
    return labels;
  }

  public void setLabels(List<TemplateSummaryDiffLabels> labels) {
    this.labels = labels;
  }

  public TemplateSummaryDiff labelMappings(List<TemplateSummaryDiffLabelMappings> labelMappings) {
    this.labelMappings = labelMappings;
    return this;
  }

  public TemplateSummaryDiff addLabelMappingsItem(TemplateSummaryDiffLabelMappings labelMappingsItem) {
    if (this.labelMappings == null) {
      this.labelMappings = new ArrayList<>();
    }
    this.labelMappings.add(labelMappingsItem);
    return this;
  }

   /**
   * Get labelMappings
   * @return labelMappings
  **/
  public List<TemplateSummaryDiffLabelMappings> getLabelMappings() {
    return labelMappings;
  }

  public void setLabelMappings(List<TemplateSummaryDiffLabelMappings> labelMappings) {
    this.labelMappings = labelMappings;
  }

  public TemplateSummaryDiff notificationEndpoints(List<TemplateSummaryDiffNotificationEndpoints> notificationEndpoints) {
    this.notificationEndpoints = notificationEndpoints;
    return this;
  }

  public TemplateSummaryDiff addNotificationEndpointsItem(TemplateSummaryDiffNotificationEndpoints notificationEndpointsItem) {
    if (this.notificationEndpoints == null) {
      this.notificationEndpoints = new ArrayList<>();
    }
    this.notificationEndpoints.add(notificationEndpointsItem);
    return this;
  }

   /**
   * Get notificationEndpoints
   * @return notificationEndpoints
  **/
  public List<TemplateSummaryDiffNotificationEndpoints> getNotificationEndpoints() {
    return notificationEndpoints;
  }

  public void setNotificationEndpoints(List<TemplateSummaryDiffNotificationEndpoints> notificationEndpoints) {
    this.notificationEndpoints = notificationEndpoints;
  }

  public TemplateSummaryDiff notificationRules(List<TemplateSummaryDiffNotificationRules> notificationRules) {
    this.notificationRules = notificationRules;
    return this;
  }

  public TemplateSummaryDiff addNotificationRulesItem(TemplateSummaryDiffNotificationRules notificationRulesItem) {
    if (this.notificationRules == null) {
      this.notificationRules = new ArrayList<>();
    }
    this.notificationRules.add(notificationRulesItem);
    return this;
  }

   /**
   * Get notificationRules
   * @return notificationRules
  **/
  public List<TemplateSummaryDiffNotificationRules> getNotificationRules() {
    return notificationRules;
  }

  public void setNotificationRules(List<TemplateSummaryDiffNotificationRules> notificationRules) {
    this.notificationRules = notificationRules;
  }

  public TemplateSummaryDiff tasks(List<TemplateSummaryDiffTasks> tasks) {
    this.tasks = tasks;
    return this;
  }

  public TemplateSummaryDiff addTasksItem(TemplateSummaryDiffTasks tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

   /**
   * Get tasks
   * @return tasks
  **/
  public List<TemplateSummaryDiffTasks> getTasks() {
    return tasks;
  }

  public void setTasks(List<TemplateSummaryDiffTasks> tasks) {
    this.tasks = tasks;
  }

  public TemplateSummaryDiff telegrafConfigs(List<TemplateSummaryDiffTelegrafConfigs> telegrafConfigs) {
    this.telegrafConfigs = telegrafConfigs;
    return this;
  }

  public TemplateSummaryDiff addTelegrafConfigsItem(TemplateSummaryDiffTelegrafConfigs telegrafConfigsItem) {
    if (this.telegrafConfigs == null) {
      this.telegrafConfigs = new ArrayList<>();
    }
    this.telegrafConfigs.add(telegrafConfigsItem);
    return this;
  }

   /**
   * Get telegrafConfigs
   * @return telegrafConfigs
  **/
  public List<TemplateSummaryDiffTelegrafConfigs> getTelegrafConfigs() {
    return telegrafConfigs;
  }

  public void setTelegrafConfigs(List<TemplateSummaryDiffTelegrafConfigs> telegrafConfigs) {
    this.telegrafConfigs = telegrafConfigs;
  }

  public TemplateSummaryDiff variables(List<TemplateSummaryDiffVariables> variables) {
    this.variables = variables;
    return this;
  }

  public TemplateSummaryDiff addVariablesItem(TemplateSummaryDiffVariables variablesItem) {
    if (this.variables == null) {
      this.variables = new ArrayList<>();
    }
    this.variables.add(variablesItem);
    return this;
  }

   /**
   * Get variables
   * @return variables
  **/
  public List<TemplateSummaryDiffVariables> getVariables() {
    return variables;
  }

  public void setVariables(List<TemplateSummaryDiffVariables> variables) {
    this.variables = variables;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateSummaryDiff templateSummaryDiff = (TemplateSummaryDiff) o;
    return Objects.equals(this.buckets, templateSummaryDiff.buckets) &&
        Objects.equals(this.checks, templateSummaryDiff.checks) &&
        Objects.equals(this.dashboards, templateSummaryDiff.dashboards) &&
        Objects.equals(this.labels, templateSummaryDiff.labels) &&
        Objects.equals(this.labelMappings, templateSummaryDiff.labelMappings) &&
        Objects.equals(this.notificationEndpoints, templateSummaryDiff.notificationEndpoints) &&
        Objects.equals(this.notificationRules, templateSummaryDiff.notificationRules) &&
        Objects.equals(this.tasks, templateSummaryDiff.tasks) &&
        Objects.equals(this.telegrafConfigs, templateSummaryDiff.telegrafConfigs) &&
        Objects.equals(this.variables, templateSummaryDiff.variables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buckets, checks, dashboards, labels, labelMappings, notificationEndpoints, notificationRules, tasks, telegrafConfigs, variables);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateSummaryDiff {\n");
    sb.append("    buckets: ").append(toIndentedString(buckets)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    dashboards: ").append(toIndentedString(dashboards)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    labelMappings: ").append(toIndentedString(labelMappings)).append("\n");
    sb.append("    notificationEndpoints: ").append(toIndentedString(notificationEndpoints)).append("\n");
    sb.append("    notificationRules: ").append(toIndentedString(notificationRules)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    telegrafConfigs: ").append(toIndentedString(telegrafConfigs)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

