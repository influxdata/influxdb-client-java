/*
 * Influx OSS API Service
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.influxdb.client.domain;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * LogEvent
 */

public class LogEvent {
  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private OffsetDateTime time;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RUN_I_D = "runID";
  @SerializedName(SERIALIZED_NAME_RUN_I_D)
  private String runID;

   /**
   * Time event occurred, RFC3339Nano.
   * @return time
  **/
  @ApiModelProperty(value = "Time event occurred, RFC3339Nano.")
  public OffsetDateTime getTime() {
    return time;
  }

   /**
   * A description of the event that occurred.
   * @return message
  **/
  @ApiModelProperty(example = "Halt and catch fire", value = "A description of the event that occurred.")
  public String getMessage() {
    return message;
  }

   /**
   * the ID of the task that logged
   * @return runID
  **/
  @ApiModelProperty(value = "the ID of the task that logged")
  public String getRunID() {
    return runID;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogEvent logEvent = (LogEvent) o;
    return Objects.equals(this.time, logEvent.time) &&
        Objects.equals(this.message, logEvent.message) &&
        Objects.equals(this.runID, logEvent.runID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(time, message, runID);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogEvent {\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    runID: ").append(toIndentedString(runID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

