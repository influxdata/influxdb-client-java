/*
 * Influx OSS API Service
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.influxdb.client.domain;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.influxdb.client.domain.Axes;
import com.influxdb.client.domain.DashboardColor;
import com.influxdb.client.domain.DashboardQuery;
import com.influxdb.client.domain.DecimalPlaces;
import com.influxdb.client.domain.StaticLegend;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * LinePlusSingleStatProperties
 */

public class LinePlusSingleStatProperties extends ViewProperties {
  public static final String SERIALIZED_NAME_TIME_FORMAT = "timeFormat";
  @SerializedName(SERIALIZED_NAME_TIME_FORMAT)
  private String timeFormat;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    LINE_PLUS_SINGLE_STAT("line-plus-single-stat");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.LINE_PLUS_SINGLE_STAT;

  public static final String SERIALIZED_NAME_QUERIES = "queries";
  @SerializedName(SERIALIZED_NAME_QUERIES)
  private List<DashboardQuery> queries = new ArrayList<>();

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private List<DashboardColor> colors = new ArrayList<>();

  /**
   * Gets or Sets shape
   */
  @JsonAdapter(ShapeEnum.Adapter.class)
  public enum ShapeEnum {
    CHRONOGRAF_V2("chronograf-v2");

    private String value;

    ShapeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShapeEnum fromValue(String text) {
      for (ShapeEnum b : ShapeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ShapeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShapeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShapeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ShapeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_SHAPE = "shape";
  @SerializedName(SERIALIZED_NAME_SHAPE)
  private ShapeEnum shape = ShapeEnum.CHRONOGRAF_V2;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_SHOW_NOTE_WHEN_EMPTY = "showNoteWhenEmpty";
  @SerializedName(SERIALIZED_NAME_SHOW_NOTE_WHEN_EMPTY)
  private Boolean showNoteWhenEmpty;

  public static final String SERIALIZED_NAME_AXES = "axes";
  @SerializedName(SERIALIZED_NAME_AXES)
  private Axes axes = null;

  public static final String SERIALIZED_NAME_STATIC_LEGEND = "staticLegend";
  @SerializedName(SERIALIZED_NAME_STATIC_LEGEND)
  private StaticLegend staticLegend = null;

  public static final String SERIALIZED_NAME_X_COLUMN = "xColumn";
  @SerializedName(SERIALIZED_NAME_X_COLUMN)
  private String xColumn;

  public static final String SERIALIZED_NAME_GENERATE_X_AXIS_TICKS = "generateXAxisTicks";
  @SerializedName(SERIALIZED_NAME_GENERATE_X_AXIS_TICKS)
  private List<String> generateXAxisTicks = new ArrayList<>();

  public static final String SERIALIZED_NAME_X_TOTAL_TICKS = "xTotalTicks";
  @SerializedName(SERIALIZED_NAME_X_TOTAL_TICKS)
  private Integer xTotalTicks;

  public static final String SERIALIZED_NAME_X_TICK_START = "xTickStart";
  @SerializedName(SERIALIZED_NAME_X_TICK_START)
  private Float xTickStart;

  public static final String SERIALIZED_NAME_X_TICK_STEP = "xTickStep";
  @SerializedName(SERIALIZED_NAME_X_TICK_STEP)
  private Float xTickStep;

  public static final String SERIALIZED_NAME_Y_COLUMN = "yColumn";
  @SerializedName(SERIALIZED_NAME_Y_COLUMN)
  private String yColumn;

  public static final String SERIALIZED_NAME_GENERATE_Y_AXIS_TICKS = "generateYAxisTicks";
  @SerializedName(SERIALIZED_NAME_GENERATE_Y_AXIS_TICKS)
  private List<String> generateYAxisTicks = new ArrayList<>();

  public static final String SERIALIZED_NAME_Y_TOTAL_TICKS = "yTotalTicks";
  @SerializedName(SERIALIZED_NAME_Y_TOTAL_TICKS)
  private Integer yTotalTicks;

  public static final String SERIALIZED_NAME_Y_TICK_START = "yTickStart";
  @SerializedName(SERIALIZED_NAME_Y_TICK_START)
  private Float yTickStart;

  public static final String SERIALIZED_NAME_Y_TICK_STEP = "yTickStep";
  @SerializedName(SERIALIZED_NAME_Y_TICK_STEP)
  private Float yTickStep;

  public static final String SERIALIZED_NAME_SHADE_BELOW = "shadeBelow";
  @SerializedName(SERIALIZED_NAME_SHADE_BELOW)
  private Boolean shadeBelow;

  /**
   * Gets or Sets hoverDimension
   */
  @JsonAdapter(HoverDimensionEnum.Adapter.class)
  public enum HoverDimensionEnum {
    AUTO("auto"),
    
    X("x"),
    
    Y("y"),
    
    XY("xy");

    private String value;

    HoverDimensionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HoverDimensionEnum fromValue(String text) {
      for (HoverDimensionEnum b : HoverDimensionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<HoverDimensionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HoverDimensionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HoverDimensionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return HoverDimensionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_HOVER_DIMENSION = "hoverDimension";
  @SerializedName(SERIALIZED_NAME_HOVER_DIMENSION)
  private HoverDimensionEnum hoverDimension;

  /**
   * Gets or Sets position
   */
  @JsonAdapter(PositionEnum.Adapter.class)
  public enum PositionEnum {
    OVERLAID("overlaid"),
    
    STACKED("stacked");

    private String value;

    PositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PositionEnum fromValue(String text) {
      for (PositionEnum b : PositionEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<PositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PositionEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PositionEnum.fromValue(String.valueOf(value));
      }
    }
  }

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private PositionEnum position;

  public static final String SERIALIZED_NAME_PREFIX = "prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private String prefix;

  public static final String SERIALIZED_NAME_SUFFIX = "suffix";
  @SerializedName(SERIALIZED_NAME_SUFFIX)
  private String suffix;

  public static final String SERIALIZED_NAME_DECIMAL_PLACES = "decimalPlaces";
  @SerializedName(SERIALIZED_NAME_DECIMAL_PLACES)
  private DecimalPlaces decimalPlaces = null;

  public static final String SERIALIZED_NAME_LEGEND_COLORIZE_ROWS = "legendColorizeRows";
  @SerializedName(SERIALIZED_NAME_LEGEND_COLORIZE_ROWS)
  private Boolean legendColorizeRows;

  public static final String SERIALIZED_NAME_LEGEND_HIDE = "legendHide";
  @SerializedName(SERIALIZED_NAME_LEGEND_HIDE)
  private Boolean legendHide;

  public static final String SERIALIZED_NAME_LEGEND_OPACITY = "legendOpacity";
  @SerializedName(SERIALIZED_NAME_LEGEND_OPACITY)
  private Float legendOpacity;

  public static final String SERIALIZED_NAME_LEGEND_ORIENTATION_THRESHOLD = "legendOrientationThreshold";
  @SerializedName(SERIALIZED_NAME_LEGEND_ORIENTATION_THRESHOLD)
  private Integer legendOrientationThreshold;

  public LinePlusSingleStatProperties timeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
    return this;
  }

   /**
   * Get timeFormat
   * @return timeFormat
  **/
  @ApiModelProperty(value = "")
  public String getTimeFormat() {
    return timeFormat;
  }

  public void setTimeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(required = true, value = "")
  public TypeEnum getType() {
    return type;
  }

  public LinePlusSingleStatProperties queries(List<DashboardQuery> queries) {
    this.queries = queries;
    return this;
  }

  public LinePlusSingleStatProperties addQueriesItem(DashboardQuery queriesItem) {
    this.queries.add(queriesItem);
    return this;
  }

   /**
   * Get queries
   * @return queries
  **/
  @ApiModelProperty(required = true, value = "")
  public List<DashboardQuery> getQueries() {
    return queries;
  }

  public void setQueries(List<DashboardQuery> queries) {
    this.queries = queries;
  }

  public LinePlusSingleStatProperties colors(List<DashboardColor> colors) {
    this.colors = colors;
    return this;
  }

  public LinePlusSingleStatProperties addColorsItem(DashboardColor colorsItem) {
    this.colors.add(colorsItem);
    return this;
  }

   /**
   * Colors define color encoding of data into a visualization
   * @return colors
  **/
  @ApiModelProperty(required = true, value = "Colors define color encoding of data into a visualization")
  public List<DashboardColor> getColors() {
    return colors;
  }

  public void setColors(List<DashboardColor> colors) {
    this.colors = colors;
  }

   /**
   * Get shape
   * @return shape
  **/
  @ApiModelProperty(required = true, value = "")
  public ShapeEnum getShape() {
    return shape;
  }

  public LinePlusSingleStatProperties note(String note) {
    this.note = note;
    return this;
  }

   /**
   * Get note
   * @return note
  **/
  @ApiModelProperty(required = true, value = "")
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }

  public LinePlusSingleStatProperties showNoteWhenEmpty(Boolean showNoteWhenEmpty) {
    this.showNoteWhenEmpty = showNoteWhenEmpty;
    return this;
  }

   /**
   * If true, will display note when empty
   * @return showNoteWhenEmpty
  **/
  @ApiModelProperty(required = true, value = "If true, will display note when empty")
  public Boolean getShowNoteWhenEmpty() {
    return showNoteWhenEmpty;
  }

  public void setShowNoteWhenEmpty(Boolean showNoteWhenEmpty) {
    this.showNoteWhenEmpty = showNoteWhenEmpty;
  }

  public LinePlusSingleStatProperties axes(Axes axes) {
    this.axes = axes;
    return this;
  }

   /**
   * Get axes
   * @return axes
  **/
  @ApiModelProperty(required = true, value = "")
  public Axes getAxes() {
    return axes;
  }

  public void setAxes(Axes axes) {
    this.axes = axes;
  }

  public LinePlusSingleStatProperties staticLegend(StaticLegend staticLegend) {
    this.staticLegend = staticLegend;
    return this;
  }

   /**
   * Get staticLegend
   * @return staticLegend
  **/
  @ApiModelProperty(value = "")
  public StaticLegend getStaticLegend() {
    return staticLegend;
  }

  public void setStaticLegend(StaticLegend staticLegend) {
    this.staticLegend = staticLegend;
  }

  public LinePlusSingleStatProperties xColumn(String xColumn) {
    this.xColumn = xColumn;
    return this;
  }

   /**
   * Get xColumn
   * @return xColumn
  **/
  @ApiModelProperty(value = "")
  public String getXColumn() {
    return xColumn;
  }

  public void setXColumn(String xColumn) {
    this.xColumn = xColumn;
  }

  public LinePlusSingleStatProperties generateXAxisTicks(List<String> generateXAxisTicks) {
    this.generateXAxisTicks = generateXAxisTicks;
    return this;
  }

  public LinePlusSingleStatProperties addGenerateXAxisTicksItem(String generateXAxisTicksItem) {
    if (this.generateXAxisTicks == null) {
      this.generateXAxisTicks = new ArrayList<>();
    }
    this.generateXAxisTicks.add(generateXAxisTicksItem);
    return this;
  }

   /**
   * Get generateXAxisTicks
   * @return generateXAxisTicks
  **/
  @ApiModelProperty(value = "")
  public List<String> getGenerateXAxisTicks() {
    return generateXAxisTicks;
  }

  public void setGenerateXAxisTicks(List<String> generateXAxisTicks) {
    this.generateXAxisTicks = generateXAxisTicks;
  }

  public LinePlusSingleStatProperties xTotalTicks(Integer xTotalTicks) {
    this.xTotalTicks = xTotalTicks;
    return this;
  }

   /**
   * Get xTotalTicks
   * @return xTotalTicks
  **/
  @ApiModelProperty(value = "")
  public Integer getXTotalTicks() {
    return xTotalTicks;
  }

  public void setXTotalTicks(Integer xTotalTicks) {
    this.xTotalTicks = xTotalTicks;
  }

  public LinePlusSingleStatProperties xTickStart(Float xTickStart) {
    this.xTickStart = xTickStart;
    return this;
  }

   /**
   * Get xTickStart
   * @return xTickStart
  **/
  @ApiModelProperty(value = "")
  public Float getXTickStart() {
    return xTickStart;
  }

  public void setXTickStart(Float xTickStart) {
    this.xTickStart = xTickStart;
  }

  public LinePlusSingleStatProperties xTickStep(Float xTickStep) {
    this.xTickStep = xTickStep;
    return this;
  }

   /**
   * Get xTickStep
   * @return xTickStep
  **/
  @ApiModelProperty(value = "")
  public Float getXTickStep() {
    return xTickStep;
  }

  public void setXTickStep(Float xTickStep) {
    this.xTickStep = xTickStep;
  }

  public LinePlusSingleStatProperties yColumn(String yColumn) {
    this.yColumn = yColumn;
    return this;
  }

   /**
   * Get yColumn
   * @return yColumn
  **/
  @ApiModelProperty(value = "")
  public String getYColumn() {
    return yColumn;
  }

  public void setYColumn(String yColumn) {
    this.yColumn = yColumn;
  }

  public LinePlusSingleStatProperties generateYAxisTicks(List<String> generateYAxisTicks) {
    this.generateYAxisTicks = generateYAxisTicks;
    return this;
  }

  public LinePlusSingleStatProperties addGenerateYAxisTicksItem(String generateYAxisTicksItem) {
    if (this.generateYAxisTicks == null) {
      this.generateYAxisTicks = new ArrayList<>();
    }
    this.generateYAxisTicks.add(generateYAxisTicksItem);
    return this;
  }

   /**
   * Get generateYAxisTicks
   * @return generateYAxisTicks
  **/
  @ApiModelProperty(value = "")
  public List<String> getGenerateYAxisTicks() {
    return generateYAxisTicks;
  }

  public void setGenerateYAxisTicks(List<String> generateYAxisTicks) {
    this.generateYAxisTicks = generateYAxisTicks;
  }

  public LinePlusSingleStatProperties yTotalTicks(Integer yTotalTicks) {
    this.yTotalTicks = yTotalTicks;
    return this;
  }

   /**
   * Get yTotalTicks
   * @return yTotalTicks
  **/
  @ApiModelProperty(value = "")
  public Integer getYTotalTicks() {
    return yTotalTicks;
  }

  public void setYTotalTicks(Integer yTotalTicks) {
    this.yTotalTicks = yTotalTicks;
  }

  public LinePlusSingleStatProperties yTickStart(Float yTickStart) {
    this.yTickStart = yTickStart;
    return this;
  }

   /**
   * Get yTickStart
   * @return yTickStart
  **/
  @ApiModelProperty(value = "")
  public Float getYTickStart() {
    return yTickStart;
  }

  public void setYTickStart(Float yTickStart) {
    this.yTickStart = yTickStart;
  }

  public LinePlusSingleStatProperties yTickStep(Float yTickStep) {
    this.yTickStep = yTickStep;
    return this;
  }

   /**
   * Get yTickStep
   * @return yTickStep
  **/
  @ApiModelProperty(value = "")
  public Float getYTickStep() {
    return yTickStep;
  }

  public void setYTickStep(Float yTickStep) {
    this.yTickStep = yTickStep;
  }

  public LinePlusSingleStatProperties shadeBelow(Boolean shadeBelow) {
    this.shadeBelow = shadeBelow;
    return this;
  }

   /**
   * Get shadeBelow
   * @return shadeBelow
  **/
  @ApiModelProperty(value = "")
  public Boolean getShadeBelow() {
    return shadeBelow;
  }

  public void setShadeBelow(Boolean shadeBelow) {
    this.shadeBelow = shadeBelow;
  }

  public LinePlusSingleStatProperties hoverDimension(HoverDimensionEnum hoverDimension) {
    this.hoverDimension = hoverDimension;
    return this;
  }

   /**
   * Get hoverDimension
   * @return hoverDimension
  **/
  @ApiModelProperty(value = "")
  public HoverDimensionEnum getHoverDimension() {
    return hoverDimension;
  }

  public void setHoverDimension(HoverDimensionEnum hoverDimension) {
    this.hoverDimension = hoverDimension;
  }

  public LinePlusSingleStatProperties position(PositionEnum position) {
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @ApiModelProperty(required = true, value = "")
  public PositionEnum getPosition() {
    return position;
  }

  public void setPosition(PositionEnum position) {
    this.position = position;
  }

  public LinePlusSingleStatProperties prefix(String prefix) {
    this.prefix = prefix;
    return this;
  }

   /**
   * Get prefix
   * @return prefix
  **/
  @ApiModelProperty(required = true, value = "")
  public String getPrefix() {
    return prefix;
  }

  public void setPrefix(String prefix) {
    this.prefix = prefix;
  }

  public LinePlusSingleStatProperties suffix(String suffix) {
    this.suffix = suffix;
    return this;
  }

   /**
   * Get suffix
   * @return suffix
  **/
  @ApiModelProperty(required = true, value = "")
  public String getSuffix() {
    return suffix;
  }

  public void setSuffix(String suffix) {
    this.suffix = suffix;
  }

  public LinePlusSingleStatProperties decimalPlaces(DecimalPlaces decimalPlaces) {
    this.decimalPlaces = decimalPlaces;
    return this;
  }

   /**
   * Get decimalPlaces
   * @return decimalPlaces
  **/
  @ApiModelProperty(required = true, value = "")
  public DecimalPlaces getDecimalPlaces() {
    return decimalPlaces;
  }

  public void setDecimalPlaces(DecimalPlaces decimalPlaces) {
    this.decimalPlaces = decimalPlaces;
  }

  public LinePlusSingleStatProperties legendColorizeRows(Boolean legendColorizeRows) {
    this.legendColorizeRows = legendColorizeRows;
    return this;
  }

   /**
   * Get legendColorizeRows
   * @return legendColorizeRows
  **/
  @ApiModelProperty(value = "")
  public Boolean getLegendColorizeRows() {
    return legendColorizeRows;
  }

  public void setLegendColorizeRows(Boolean legendColorizeRows) {
    this.legendColorizeRows = legendColorizeRows;
  }

  public LinePlusSingleStatProperties legendHide(Boolean legendHide) {
    this.legendHide = legendHide;
    return this;
  }

   /**
   * Get legendHide
   * @return legendHide
  **/
  @ApiModelProperty(value = "")
  public Boolean getLegendHide() {
    return legendHide;
  }

  public void setLegendHide(Boolean legendHide) {
    this.legendHide = legendHide;
  }

  public LinePlusSingleStatProperties legendOpacity(Float legendOpacity) {
    this.legendOpacity = legendOpacity;
    return this;
  }

   /**
   * Get legendOpacity
   * @return legendOpacity
  **/
  @ApiModelProperty(value = "")
  public Float getLegendOpacity() {
    return legendOpacity;
  }

  public void setLegendOpacity(Float legendOpacity) {
    this.legendOpacity = legendOpacity;
  }

  public LinePlusSingleStatProperties legendOrientationThreshold(Integer legendOrientationThreshold) {
    this.legendOrientationThreshold = legendOrientationThreshold;
    return this;
  }

   /**
   * Get legendOrientationThreshold
   * @return legendOrientationThreshold
  **/
  @ApiModelProperty(value = "")
  public Integer getLegendOrientationThreshold() {
    return legendOrientationThreshold;
  }

  public void setLegendOrientationThreshold(Integer legendOrientationThreshold) {
    this.legendOrientationThreshold = legendOrientationThreshold;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinePlusSingleStatProperties linePlusSingleStatProperties = (LinePlusSingleStatProperties) o;
    return Objects.equals(this.timeFormat, linePlusSingleStatProperties.timeFormat) &&
        Objects.equals(this.type, linePlusSingleStatProperties.type) &&
        Objects.equals(this.queries, linePlusSingleStatProperties.queries) &&
        Objects.equals(this.colors, linePlusSingleStatProperties.colors) &&
        Objects.equals(this.shape, linePlusSingleStatProperties.shape) &&
        Objects.equals(this.note, linePlusSingleStatProperties.note) &&
        Objects.equals(this.showNoteWhenEmpty, linePlusSingleStatProperties.showNoteWhenEmpty) &&
        Objects.equals(this.axes, linePlusSingleStatProperties.axes) &&
        Objects.equals(this.staticLegend, linePlusSingleStatProperties.staticLegend) &&
        Objects.equals(this.xColumn, linePlusSingleStatProperties.xColumn) &&
        Objects.equals(this.generateXAxisTicks, linePlusSingleStatProperties.generateXAxisTicks) &&
        Objects.equals(this.xTotalTicks, linePlusSingleStatProperties.xTotalTicks) &&
        Objects.equals(this.xTickStart, linePlusSingleStatProperties.xTickStart) &&
        Objects.equals(this.xTickStep, linePlusSingleStatProperties.xTickStep) &&
        Objects.equals(this.yColumn, linePlusSingleStatProperties.yColumn) &&
        Objects.equals(this.generateYAxisTicks, linePlusSingleStatProperties.generateYAxisTicks) &&
        Objects.equals(this.yTotalTicks, linePlusSingleStatProperties.yTotalTicks) &&
        Objects.equals(this.yTickStart, linePlusSingleStatProperties.yTickStart) &&
        Objects.equals(this.yTickStep, linePlusSingleStatProperties.yTickStep) &&
        Objects.equals(this.shadeBelow, linePlusSingleStatProperties.shadeBelow) &&
        Objects.equals(this.hoverDimension, linePlusSingleStatProperties.hoverDimension) &&
        Objects.equals(this.position, linePlusSingleStatProperties.position) &&
        Objects.equals(this.prefix, linePlusSingleStatProperties.prefix) &&
        Objects.equals(this.suffix, linePlusSingleStatProperties.suffix) &&
        Objects.equals(this.decimalPlaces, linePlusSingleStatProperties.decimalPlaces) &&
        Objects.equals(this.legendColorizeRows, linePlusSingleStatProperties.legendColorizeRows) &&
        Objects.equals(this.legendHide, linePlusSingleStatProperties.legendHide) &&
        Objects.equals(this.legendOpacity, linePlusSingleStatProperties.legendOpacity) &&
        Objects.equals(this.legendOrientationThreshold, linePlusSingleStatProperties.legendOrientationThreshold) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeFormat, type, queries, colors, shape, note, showNoteWhenEmpty, axes, staticLegend, xColumn, generateXAxisTicks, xTotalTicks, xTickStart, xTickStep, yColumn, generateYAxisTicks, yTotalTicks, yTickStart, yTickStep, shadeBelow, hoverDimension, position, prefix, suffix, decimalPlaces, legendColorizeRows, legendHide, legendOpacity, legendOrientationThreshold, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinePlusSingleStatProperties {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    timeFormat: ").append(toIndentedString(timeFormat)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("    shape: ").append(toIndentedString(shape)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    showNoteWhenEmpty: ").append(toIndentedString(showNoteWhenEmpty)).append("\n");
    sb.append("    axes: ").append(toIndentedString(axes)).append("\n");
    sb.append("    staticLegend: ").append(toIndentedString(staticLegend)).append("\n");
    sb.append("    xColumn: ").append(toIndentedString(xColumn)).append("\n");
    sb.append("    generateXAxisTicks: ").append(toIndentedString(generateXAxisTicks)).append("\n");
    sb.append("    xTotalTicks: ").append(toIndentedString(xTotalTicks)).append("\n");
    sb.append("    xTickStart: ").append(toIndentedString(xTickStart)).append("\n");
    sb.append("    xTickStep: ").append(toIndentedString(xTickStep)).append("\n");
    sb.append("    yColumn: ").append(toIndentedString(yColumn)).append("\n");
    sb.append("    generateYAxisTicks: ").append(toIndentedString(generateYAxisTicks)).append("\n");
    sb.append("    yTotalTicks: ").append(toIndentedString(yTotalTicks)).append("\n");
    sb.append("    yTickStart: ").append(toIndentedString(yTickStart)).append("\n");
    sb.append("    yTickStep: ").append(toIndentedString(yTickStep)).append("\n");
    sb.append("    shadeBelow: ").append(toIndentedString(shadeBelow)).append("\n");
    sb.append("    hoverDimension: ").append(toIndentedString(hoverDimension)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    decimalPlaces: ").append(toIndentedString(decimalPlaces)).append("\n");
    sb.append("    legendColorizeRows: ").append(toIndentedString(legendColorizeRows)).append("\n");
    sb.append("    legendHide: ").append(toIndentedString(legendHide)).append("\n");
    sb.append("    legendOpacity: ").append(toIndentedString(legendOpacity)).append("\n");
    sb.append("    legendOrientationThreshold: ").append(toIndentedString(legendOrientationThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

