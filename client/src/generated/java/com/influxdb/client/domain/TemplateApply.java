/*
 * InfluxDB OSS API Service
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.influxdb.client.domain;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.influxdb.client.domain.TemplateApplyRemotes;
import com.influxdb.client.domain.TemplateApplyTemplate;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * TemplateApply
 */

public class TemplateApply {
  public static final String SERIALIZED_NAME_DRY_RUN = "dryRun";
  @SerializedName(SERIALIZED_NAME_DRY_RUN)
  private Boolean dryRun;

  public static final String SERIALIZED_NAME_ORG_I_D = "orgID";
  @SerializedName(SERIALIZED_NAME_ORG_I_D)
  private String orgID;

  public static final String SERIALIZED_NAME_STACK_I_D = "stackID";
  @SerializedName(SERIALIZED_NAME_STACK_I_D)
  private String stackID;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private TemplateApplyTemplate template = null;

  public static final String SERIALIZED_NAME_TEMPLATES = "templates";
  @SerializedName(SERIALIZED_NAME_TEMPLATES)
  private List<TemplateApplyTemplate> templates = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENV_REFS = "envRefs";
  @SerializedName(SERIALIZED_NAME_ENV_REFS)
  private Map<String, Object> envRefs = new HashMap<>();

  public static final String SERIALIZED_NAME_SECRETS = "secrets";
  @SerializedName(SERIALIZED_NAME_SECRETS)
  private Map<String, String> secrets = new HashMap<>();

  public static final String SERIALIZED_NAME_REMOTES = "remotes";
  @SerializedName(SERIALIZED_NAME_REMOTES)
  private List<TemplateApplyRemotes> remotes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<Object> actions = new ArrayList<>();

  public TemplateApply dryRun(Boolean dryRun) {
    this.dryRun = dryRun;
    return this;
  }

   /**
   * Get dryRun
   * @return dryRun
  **/
  public Boolean getDryRun() {
    return dryRun;
  }

  public void setDryRun(Boolean dryRun) {
    this.dryRun = dryRun;
  }

  public TemplateApply orgID(String orgID) {
    this.orgID = orgID;
    return this;
  }

   /**
   * Get orgID
   * @return orgID
  **/
  public String getOrgID() {
    return orgID;
  }

  public void setOrgID(String orgID) {
    this.orgID = orgID;
  }

  public TemplateApply stackID(String stackID) {
    this.stackID = stackID;
    return this;
  }

   /**
   * Get stackID
   * @return stackID
  **/
  public String getStackID() {
    return stackID;
  }

  public void setStackID(String stackID) {
    this.stackID = stackID;
  }

  public TemplateApply template(TemplateApplyTemplate template) {
    this.template = template;
    return this;
  }

   /**
   * Get template
   * @return template
  **/
  public TemplateApplyTemplate getTemplate() {
    return template;
  }

  public void setTemplate(TemplateApplyTemplate template) {
    this.template = template;
  }

  public TemplateApply templates(List<TemplateApplyTemplate> templates) {
    this.templates = templates;
    return this;
  }

  public TemplateApply addTemplatesItem(TemplateApplyTemplate templatesItem) {
    if (this.templates == null) {
      this.templates = new ArrayList<>();
    }
    this.templates.add(templatesItem);
    return this;
  }

   /**
   * Get templates
   * @return templates
  **/
  public List<TemplateApplyTemplate> getTemplates() {
    return templates;
  }

  public void setTemplates(List<TemplateApplyTemplate> templates) {
    this.templates = templates;
  }

  public TemplateApply envRefs(Map<String, Object> envRefs) {
    this.envRefs = envRefs;
    return this;
  }

  public TemplateApply putEnvRefsItem(String key, Object envRefsItem) {
    if (this.envRefs == null) {
      this.envRefs = new HashMap<>();
    }
    this.envRefs.put(key, envRefsItem);
    return this;
  }

   /**
   * Get envRefs
   * @return envRefs
  **/
  public Map<String, Object> getEnvRefs() {
    return envRefs;
  }

  public void setEnvRefs(Map<String, Object> envRefs) {
    this.envRefs = envRefs;
  }

  public TemplateApply secrets(Map<String, String> secrets) {
    this.secrets = secrets;
    return this;
  }

  public TemplateApply putSecretsItem(String key, String secretsItem) {
    if (this.secrets == null) {
      this.secrets = new HashMap<>();
    }
    this.secrets.put(key, secretsItem);
    return this;
  }

   /**
   * Get secrets
   * @return secrets
  **/
  public Map<String, String> getSecrets() {
    return secrets;
  }

  public void setSecrets(Map<String, String> secrets) {
    this.secrets = secrets;
  }

  public TemplateApply remotes(List<TemplateApplyRemotes> remotes) {
    this.remotes = remotes;
    return this;
  }

  public TemplateApply addRemotesItem(TemplateApplyRemotes remotesItem) {
    if (this.remotes == null) {
      this.remotes = new ArrayList<>();
    }
    this.remotes.add(remotesItem);
    return this;
  }

   /**
   * Get remotes
   * @return remotes
  **/
  public List<TemplateApplyRemotes> getRemotes() {
    return remotes;
  }

  public void setRemotes(List<TemplateApplyRemotes> remotes) {
    this.remotes = remotes;
  }

  public TemplateApply actions(List<Object> actions) {
    this.actions = actions;
    return this;
  }

  public TemplateApply addActionsItem(Object actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

   /**
   * Get actions
   * @return actions
  **/
  public List<Object> getActions() {
    return actions;
  }

  public void setActions(List<Object> actions) {
    this.actions = actions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateApply templateApply = (TemplateApply) o;
    return Objects.equals(this.dryRun, templateApply.dryRun) &&
        Objects.equals(this.orgID, templateApply.orgID) &&
        Objects.equals(this.stackID, templateApply.stackID) &&
        Objects.equals(this.template, templateApply.template) &&
        Objects.equals(this.templates, templateApply.templates) &&
        Objects.equals(this.envRefs, templateApply.envRefs) &&
        Objects.equals(this.secrets, templateApply.secrets) &&
        Objects.equals(this.remotes, templateApply.remotes) &&
        Objects.equals(this.actions, templateApply.actions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dryRun, orgID, stackID, template, templates, envRefs, secrets, remotes, actions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateApply {\n");
    sb.append("    dryRun: ").append(toIndentedString(dryRun)).append("\n");
    sb.append("    orgID: ").append(toIndentedString(orgID)).append("\n");
    sb.append("    stackID: ").append(toIndentedString(stackID)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    templates: ").append(toIndentedString(templates)).append("\n");
    sb.append("    envRefs: ").append(toIndentedString(envRefs)).append("\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("    remotes: ").append(toIndentedString(remotes)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

