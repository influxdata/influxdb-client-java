/*
 * InfluxDB OSS API Service
 * The InfluxDB v2 API provides a programmatic interface for all interactions with InfluxDB. Access the InfluxDB API using the `/api/v2/` endpoint. 
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.influxdb.client.domain;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.influxdb.client.domain.CheckDiscriminator;
import com.influxdb.client.domain.NotificationEndpointDiscriminator;
import com.influxdb.client.domain.TelegrafRequest;
import com.influxdb.client.domain.TemplateSummaryLabel;
import com.influxdb.client.domain.TemplateSummarySummaryBuckets;
import com.influxdb.client.domain.TemplateSummarySummaryDashboards;
import com.influxdb.client.domain.TemplateSummarySummaryLabelMappings;
import com.influxdb.client.domain.TemplateSummarySummaryNotificationRules;
import com.influxdb.client.domain.TemplateSummarySummaryTasks;
import com.influxdb.client.domain.TemplateSummarySummaryVariables;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * TemplateSummarySummary
 */

public class TemplateSummarySummary {
  public static final String SERIALIZED_NAME_BUCKETS = "buckets";
  @SerializedName(SERIALIZED_NAME_BUCKETS)
  private List<TemplateSummarySummaryBuckets> buckets = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private List<CheckDiscriminator> checks = new ArrayList<>();

  public static final String SERIALIZED_NAME_DASHBOARDS = "dashboards";
  @SerializedName(SERIALIZED_NAME_DASHBOARDS)
  private List<TemplateSummarySummaryDashboards> dashboards = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<TemplateSummaryLabel> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABEL_MAPPINGS = "labelMappings";
  @SerializedName(SERIALIZED_NAME_LABEL_MAPPINGS)
  private List<TemplateSummarySummaryLabelMappings> labelMappings = new ArrayList<>();

  public static final String SERIALIZED_NAME_MISSING_ENV_REFS = "missingEnvRefs";
  @SerializedName(SERIALIZED_NAME_MISSING_ENV_REFS)
  private List<String> missingEnvRefs = new ArrayList<>();

  public static final String SERIALIZED_NAME_MISSING_SECRETS = "missingSecrets";
  @SerializedName(SERIALIZED_NAME_MISSING_SECRETS)
  private List<String> missingSecrets = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTIFICATION_ENDPOINTS = "notificationEndpoints";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_ENDPOINTS)
  private List<NotificationEndpointDiscriminator> notificationEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_NOTIFICATION_RULES = "notificationRules";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_RULES)
  private List<TemplateSummarySummaryNotificationRules> notificationRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private List<TemplateSummarySummaryTasks> tasks = new ArrayList<>();

  public static final String SERIALIZED_NAME_TELEGRAF_CONFIGS = "telegrafConfigs";
  @SerializedName(SERIALIZED_NAME_TELEGRAF_CONFIGS)
  private List<TelegrafRequest> telegrafConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_VARIABLES = "variables";
  @SerializedName(SERIALIZED_NAME_VARIABLES)
  private List<TemplateSummarySummaryVariables> variables = new ArrayList<>();

  public TemplateSummarySummary buckets(List<TemplateSummarySummaryBuckets> buckets) {
    this.buckets = buckets;
    return this;
  }

  public TemplateSummarySummary addBucketsItem(TemplateSummarySummaryBuckets bucketsItem) {
    if (this.buckets == null) {
      this.buckets = new ArrayList<>();
    }
    this.buckets.add(bucketsItem);
    return this;
  }

   /**
   * Get buckets
   * @return buckets
  **/
  public List<TemplateSummarySummaryBuckets> getBuckets() {
    return buckets;
  }

  public void setBuckets(List<TemplateSummarySummaryBuckets> buckets) {
    this.buckets = buckets;
  }

  public TemplateSummarySummary checks(List<CheckDiscriminator> checks) {
    this.checks = checks;
    return this;
  }

  public TemplateSummarySummary addChecksItem(CheckDiscriminator checksItem) {
    if (this.checks == null) {
      this.checks = new ArrayList<>();
    }
    this.checks.add(checksItem);
    return this;
  }

   /**
   * Get checks
   * @return checks
  **/
  public List<CheckDiscriminator> getChecks() {
    return checks;
  }

  public void setChecks(List<CheckDiscriminator> checks) {
    this.checks = checks;
  }

  public TemplateSummarySummary dashboards(List<TemplateSummarySummaryDashboards> dashboards) {
    this.dashboards = dashboards;
    return this;
  }

  public TemplateSummarySummary addDashboardsItem(TemplateSummarySummaryDashboards dashboardsItem) {
    if (this.dashboards == null) {
      this.dashboards = new ArrayList<>();
    }
    this.dashboards.add(dashboardsItem);
    return this;
  }

   /**
   * Get dashboards
   * @return dashboards
  **/
  public List<TemplateSummarySummaryDashboards> getDashboards() {
    return dashboards;
  }

  public void setDashboards(List<TemplateSummarySummaryDashboards> dashboards) {
    this.dashboards = dashboards;
  }

  public TemplateSummarySummary labels(List<TemplateSummaryLabel> labels) {
    this.labels = labels;
    return this;
  }

  public TemplateSummarySummary addLabelsItem(TemplateSummaryLabel labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  public List<TemplateSummaryLabel> getLabels() {
    return labels;
  }

  public void setLabels(List<TemplateSummaryLabel> labels) {
    this.labels = labels;
  }

  public TemplateSummarySummary labelMappings(List<TemplateSummarySummaryLabelMappings> labelMappings) {
    this.labelMappings = labelMappings;
    return this;
  }

  public TemplateSummarySummary addLabelMappingsItem(TemplateSummarySummaryLabelMappings labelMappingsItem) {
    if (this.labelMappings == null) {
      this.labelMappings = new ArrayList<>();
    }
    this.labelMappings.add(labelMappingsItem);
    return this;
  }

   /**
   * Get labelMappings
   * @return labelMappings
  **/
  public List<TemplateSummarySummaryLabelMappings> getLabelMappings() {
    return labelMappings;
  }

  public void setLabelMappings(List<TemplateSummarySummaryLabelMappings> labelMappings) {
    this.labelMappings = labelMappings;
  }

  public TemplateSummarySummary missingEnvRefs(List<String> missingEnvRefs) {
    this.missingEnvRefs = missingEnvRefs;
    return this;
  }

  public TemplateSummarySummary addMissingEnvRefsItem(String missingEnvRefsItem) {
    if (this.missingEnvRefs == null) {
      this.missingEnvRefs = new ArrayList<>();
    }
    this.missingEnvRefs.add(missingEnvRefsItem);
    return this;
  }

   /**
   * Get missingEnvRefs
   * @return missingEnvRefs
  **/
  public List<String> getMissingEnvRefs() {
    return missingEnvRefs;
  }

  public void setMissingEnvRefs(List<String> missingEnvRefs) {
    this.missingEnvRefs = missingEnvRefs;
  }

  public TemplateSummarySummary missingSecrets(List<String> missingSecrets) {
    this.missingSecrets = missingSecrets;
    return this;
  }

  public TemplateSummarySummary addMissingSecretsItem(String missingSecretsItem) {
    if (this.missingSecrets == null) {
      this.missingSecrets = new ArrayList<>();
    }
    this.missingSecrets.add(missingSecretsItem);
    return this;
  }

   /**
   * Get missingSecrets
   * @return missingSecrets
  **/
  public List<String> getMissingSecrets() {
    return missingSecrets;
  }

  public void setMissingSecrets(List<String> missingSecrets) {
    this.missingSecrets = missingSecrets;
  }

  public TemplateSummarySummary notificationEndpoints(List<NotificationEndpointDiscriminator> notificationEndpoints) {
    this.notificationEndpoints = notificationEndpoints;
    return this;
  }

  public TemplateSummarySummary addNotificationEndpointsItem(NotificationEndpointDiscriminator notificationEndpointsItem) {
    if (this.notificationEndpoints == null) {
      this.notificationEndpoints = new ArrayList<>();
    }
    this.notificationEndpoints.add(notificationEndpointsItem);
    return this;
  }

   /**
   * Get notificationEndpoints
   * @return notificationEndpoints
  **/
  public List<NotificationEndpointDiscriminator> getNotificationEndpoints() {
    return notificationEndpoints;
  }

  public void setNotificationEndpoints(List<NotificationEndpointDiscriminator> notificationEndpoints) {
    this.notificationEndpoints = notificationEndpoints;
  }

  public TemplateSummarySummary notificationRules(List<TemplateSummarySummaryNotificationRules> notificationRules) {
    this.notificationRules = notificationRules;
    return this;
  }

  public TemplateSummarySummary addNotificationRulesItem(TemplateSummarySummaryNotificationRules notificationRulesItem) {
    if (this.notificationRules == null) {
      this.notificationRules = new ArrayList<>();
    }
    this.notificationRules.add(notificationRulesItem);
    return this;
  }

   /**
   * Get notificationRules
   * @return notificationRules
  **/
  public List<TemplateSummarySummaryNotificationRules> getNotificationRules() {
    return notificationRules;
  }

  public void setNotificationRules(List<TemplateSummarySummaryNotificationRules> notificationRules) {
    this.notificationRules = notificationRules;
  }

  public TemplateSummarySummary tasks(List<TemplateSummarySummaryTasks> tasks) {
    this.tasks = tasks;
    return this;
  }

  public TemplateSummarySummary addTasksItem(TemplateSummarySummaryTasks tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

   /**
   * Get tasks
   * @return tasks
  **/
  public List<TemplateSummarySummaryTasks> getTasks() {
    return tasks;
  }

  public void setTasks(List<TemplateSummarySummaryTasks> tasks) {
    this.tasks = tasks;
  }

  public TemplateSummarySummary telegrafConfigs(List<TelegrafRequest> telegrafConfigs) {
    this.telegrafConfigs = telegrafConfigs;
    return this;
  }

  public TemplateSummarySummary addTelegrafConfigsItem(TelegrafRequest telegrafConfigsItem) {
    if (this.telegrafConfigs == null) {
      this.telegrafConfigs = new ArrayList<>();
    }
    this.telegrafConfigs.add(telegrafConfigsItem);
    return this;
  }

   /**
   * Get telegrafConfigs
   * @return telegrafConfigs
  **/
  public List<TelegrafRequest> getTelegrafConfigs() {
    return telegrafConfigs;
  }

  public void setTelegrafConfigs(List<TelegrafRequest> telegrafConfigs) {
    this.telegrafConfigs = telegrafConfigs;
  }

  public TemplateSummarySummary variables(List<TemplateSummarySummaryVariables> variables) {
    this.variables = variables;
    return this;
  }

  public TemplateSummarySummary addVariablesItem(TemplateSummarySummaryVariables variablesItem) {
    if (this.variables == null) {
      this.variables = new ArrayList<>();
    }
    this.variables.add(variablesItem);
    return this;
  }

   /**
   * Get variables
   * @return variables
  **/
  public List<TemplateSummarySummaryVariables> getVariables() {
    return variables;
  }

  public void setVariables(List<TemplateSummarySummaryVariables> variables) {
    this.variables = variables;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateSummarySummary templateSummarySummary = (TemplateSummarySummary) o;
    return Objects.equals(this.buckets, templateSummarySummary.buckets) &&
        Objects.equals(this.checks, templateSummarySummary.checks) &&
        Objects.equals(this.dashboards, templateSummarySummary.dashboards) &&
        Objects.equals(this.labels, templateSummarySummary.labels) &&
        Objects.equals(this.labelMappings, templateSummarySummary.labelMappings) &&
        Objects.equals(this.missingEnvRefs, templateSummarySummary.missingEnvRefs) &&
        Objects.equals(this.missingSecrets, templateSummarySummary.missingSecrets) &&
        Objects.equals(this.notificationEndpoints, templateSummarySummary.notificationEndpoints) &&
        Objects.equals(this.notificationRules, templateSummarySummary.notificationRules) &&
        Objects.equals(this.tasks, templateSummarySummary.tasks) &&
        Objects.equals(this.telegrafConfigs, templateSummarySummary.telegrafConfigs) &&
        Objects.equals(this.variables, templateSummarySummary.variables);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buckets, checks, dashboards, labels, labelMappings, missingEnvRefs, missingSecrets, notificationEndpoints, notificationRules, tasks, telegrafConfigs, variables);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateSummarySummary {\n");
    sb.append("    buckets: ").append(toIndentedString(buckets)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    dashboards: ").append(toIndentedString(dashboards)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    labelMappings: ").append(toIndentedString(labelMappings)).append("\n");
    sb.append("    missingEnvRefs: ").append(toIndentedString(missingEnvRefs)).append("\n");
    sb.append("    missingSecrets: ").append(toIndentedString(missingSecrets)).append("\n");
    sb.append("    notificationEndpoints: ").append(toIndentedString(notificationEndpoints)).append("\n");
    sb.append("    notificationRules: ").append(toIndentedString(notificationRules)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    telegrafConfigs: ").append(toIndentedString(telegrafConfigs)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

